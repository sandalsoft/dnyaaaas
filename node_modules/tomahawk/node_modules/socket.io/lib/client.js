function e(t,e){this.server=t,this.conn=e,this.encoder=new r.Encoder,this.decoder=new r.Decoder,this.id=e.id,this.request=e.request,this.setup(),this.sockets=[],this.nsps={},this.connectBuffer=[]}var r=require("socket.io-parser"),t=require("debug")("socket.io:client");module.exports=e,e.prototype.setup=function(){this.onclose=this.onclose.bind(this),this.ondata=this.ondata.bind(this),this.ondecoded=this.ondecoded.bind(this),this.decoder.on("decoded",this.ondecoded),this.conn.on("data",this.ondata),this.conn.on("close",this.onclose)},e.prototype.connect=function(r){var n,e,o;return t("connecting to namespace %s",r),n=this.server.of(r),"/"==r||this.nsps["/"]?(e=this,void(o=n.add(this,function(){e.sockets.push(o),e.nsps[n.name]=o,"/"==n.name&&e.connectBuffer&&(e.connectBuffer.forEach(e.connect,e),delete e.connectBuffer)}))):void this.connectBuffer.push(r)},e.prototype.disconnect=function(){for(var e;e=this.sockets.shift();)e.disconnect();this.close()},e.prototype.remove=function(r){var n,e=this.sockets.indexOf(r);~e?(n=this.sockets[e].nsp.name,this.sockets.splice(e,1),delete this.nsps[n]):t("ignoring remove for %s",r.id)},e.prototype.close=function(){"open"==this.conn.readyState&&(t("forcing transport close"),this.conn.close(),this.onclose("forced server close"))},e.prototype.packet=function(e,o,i){function r(t){if(!i||n.conn.transport.writable)for(var e=0;e<t.length;e++)n.conn.write(t[e])}var n=this;"open"==this.conn.readyState?(t("writing packet %j",e),o?r(e):this.encoder.encode(e,function(e){r(e)})):t("ignoring packet write %j",e)},e.prototype.ondata=function(e){this.decoder.add(e)},e.prototype.ondecoded=function(e){if(r.CONNECT==e.type)this.connect(e.nsp);else{var n=this.nsps[e.nsp];n?n.onpacket(e):t("no socket for namespace %s",e.nsp)}},e.prototype.onclose=function(e){t("client close with reason %s",e),this.destroy();for(var r;r=this.sockets.shift();)r.onclose(e);this.decoder.destroy()},e.prototype.destroy=function(){this.conn.removeListener("data",this.ondata),this.conn.removeListener("close",this.onclose),this.decoder.removeListener("decoded",this.ondecoded)};